{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Note The documentation and the tool are still in progress. Expect things to change or to break. Motivation This project started as a way to facitilate the process of performing complex electronic parametric simulations. Some of the simulations requirements are so convoluted that most of the tools are unable to perform them. This tool tries to solve this issue by providing an interface where user generated values are injected into multiple templates that can be fed to any software or script. Acknowledgments This project has been heavily influenced by Task","title":"Introduction"},{"location":"#motivation","text":"This project started as a way to facitilate the process of performing complex electronic parametric simulations. Some of the simulations requirements are so convoluted that most of the tools are unable to perform them. This tool tries to solve this issue by providing an interface where user generated values are injected into multiple templates that can be fed to any software or script.","title":"Motivation"},{"location":"#acknowledgments","text":"This project has been heavily influenced by Task","title":"Acknowledgments"},{"location":"starting/","text":"Installation Monaco can be built by having Go installed in the system and then running the following commands. $ git clone https://github.com/servinagrero/monaco $ cd monaco $ make build The static binary monaco will be generated in the directory.","title":"Getting started"},{"location":"starting/#installation","text":"Monaco can be built by having Go installed in the system and then running the following commands. $ git clone https://github.com/servinagrero/monaco $ cd monaco $ make build The static binary monaco will be generated in the directory.","title":"Installation"},{"location":"usage/","text":"Creating a job Monaco works by reading jobs from a config file and executing them. The configuration files can be written both in YAML and in TOML format. At it most basic level, a job need a name. Basic config file jobs : - name : First job - name : Second job All the jobs defined in a config file are intended to be project specific. To execute a config file, the following command is used. $ monaco -c /path/to/config.yaml Executing commands Commands can be executed like scripts by using the commands key. This accepts a lists of commands that will be executed with `/bin/sh . The | operator can be used in YAML to treate a block of text as different lines. When multiple jobs are defined, they will be executed in the order they are defined. jobs : - name : First commands : - echo \"This job will be first one\" - name : Second commands : | echo \"This job will be the second one\" echo \"And so on...\" # Would result in the output # This job will be the first one # This job will be the second one # And so on... Iterative commands A command can be executed multiple times by providing the iter variable. This variable can have the following values: A list of iterations. A map containing the key to and the optional key from . When executing multiple iterations, the iteration index can be accesed through the Iteration template variable. Example of an iteration list jobs : - name : Test iters : [ 1 , 3 , 5 , 42 ] commands : | echo \"We are on iteration {{.Iteration}}\" # Would result in the output # We are on iteration 1 # We are on iteration 3 # We are on iteration 5 # We are on iteration 42 Example of an iteration map jobs : - name : Test iters : # from: 0 If from is not specified it defaults to 0 end : 5 commands : | echo \"We are on iteration {{.Iteration}}\" # Would result in the output # We are on iteration 0 # We are on iteration 1 # We are on iteration 2 # We are on iteration 3 # We are on iteration 4 When supplying a list of iterations, we are not limited to numbers. Strings are also supported jobs : - name : Test iters : [ \"first\" , \"second\" ] commands : | echo \"We are on iteration {{.Iteration}}\" # Would result in the output # We are on iteration first # We are on iteration second Properties Custom properties can be passed to a job with the props key. The will be accesible in the templates through the Props template variable. The {{}} syntax is specific to Go templates. For more information, see below the templates documentation jobs : - name : Test props : answer : 42 commands : | echo \"The answer is {{.Props.answer}}\" # Would result in the output # The answer is 42 The properties can be defined globally for all jobs if the props key is moved to the global scope. However, each job can override them if they are defined in their own scope. props : answer : 42 jobs : - name : First commands : | echo \"Here the answer is {{.Props.answer}} - name : Second props : answer : different commands : | echo \"But here is {{.Props.answer}}\" # Would result in the output # Here the answer is 42 # But here is different Job dependencies We can add dependencies to a job if we need to run job before, even if they are declared after. To do that, add the name of the job dependency to the depends list. jobs : - name : Second depends : - First commands : | echo \"We are sure that First was executed\" - name : First commands : | echo \"Doing something important...\" # Would result in the output # Doing something important # We are sure that First was executed Environment variables Similarly to properties, environment variables for all jobs if the env key is moved to the global scope. Each job can override them if they are defined in their own scope. env : CUSTOMVAR : 42 jobs : - name : First commands : | echo \"The answer is $CUSTOMVAR\" - name : Second env : CUSTOMVAR : -1 commands : | echo \"But here is $CUSTOMVAR\" # Would result in the output # The answer is 42 # But here is -1 Custom directory The directory where the command will be executed can be changed with the dir variable. The directory can be accessed also with the Dir template variable. If it's not specified, it defaults to the directory where the tool is executed. The path to the config file can be accesed also with the ConfigFile template variable. jobs : - name : First dir : /path/to/dir commands : | echo \"We are on $PWD\" echo \"Its the same as {{.Dir}}\" # Would result in the output # We are on /path/to/dir # Its the same as /path/to/dir Silent execution If the silent variable is provided and it's true, the job will not print any command. jobs : - name : Test silent : false commands : - | echo \"This wont be seen\" Working with templates This tool relies on Go templates. For more information about them, please refer to the official documentation . This framework provides some functions that can be accesible from the templates. All the functions from the sprig library are available.","title":"Usage"},{"location":"usage/#creating-a-job","text":"Monaco works by reading jobs from a config file and executing them. The configuration files can be written both in YAML and in TOML format. At it most basic level, a job need a name. Basic config file jobs : - name : First job - name : Second job All the jobs defined in a config file are intended to be project specific. To execute a config file, the following command is used. $ monaco -c /path/to/config.yaml","title":"Creating a job"},{"location":"usage/#executing-commands","text":"Commands can be executed like scripts by using the commands key. This accepts a lists of commands that will be executed with `/bin/sh . The | operator can be used in YAML to treate a block of text as different lines. When multiple jobs are defined, they will be executed in the order they are defined. jobs : - name : First commands : - echo \"This job will be first one\" - name : Second commands : | echo \"This job will be the second one\" echo \"And so on...\" # Would result in the output # This job will be the first one # This job will be the second one # And so on...","title":"Executing commands"},{"location":"usage/#iterative-commands","text":"A command can be executed multiple times by providing the iter variable. This variable can have the following values: A list of iterations. A map containing the key to and the optional key from . When executing multiple iterations, the iteration index can be accesed through the Iteration template variable. Example of an iteration list jobs : - name : Test iters : [ 1 , 3 , 5 , 42 ] commands : | echo \"We are on iteration {{.Iteration}}\" # Would result in the output # We are on iteration 1 # We are on iteration 3 # We are on iteration 5 # We are on iteration 42 Example of an iteration map jobs : - name : Test iters : # from: 0 If from is not specified it defaults to 0 end : 5 commands : | echo \"We are on iteration {{.Iteration}}\" # Would result in the output # We are on iteration 0 # We are on iteration 1 # We are on iteration 2 # We are on iteration 3 # We are on iteration 4 When supplying a list of iterations, we are not limited to numbers. Strings are also supported jobs : - name : Test iters : [ \"first\" , \"second\" ] commands : | echo \"We are on iteration {{.Iteration}}\" # Would result in the output # We are on iteration first # We are on iteration second","title":"Iterative commands"},{"location":"usage/#properties","text":"Custom properties can be passed to a job with the props key. The will be accesible in the templates through the Props template variable. The {{}} syntax is specific to Go templates. For more information, see below the templates documentation jobs : - name : Test props : answer : 42 commands : | echo \"The answer is {{.Props.answer}}\" # Would result in the output # The answer is 42 The properties can be defined globally for all jobs if the props key is moved to the global scope. However, each job can override them if they are defined in their own scope. props : answer : 42 jobs : - name : First commands : | echo \"Here the answer is {{.Props.answer}} - name : Second props : answer : different commands : | echo \"But here is {{.Props.answer}}\" # Would result in the output # Here the answer is 42 # But here is different","title":"Properties"},{"location":"usage/#job-dependencies","text":"We can add dependencies to a job if we need to run job before, even if they are declared after. To do that, add the name of the job dependency to the depends list. jobs : - name : Second depends : - First commands : | echo \"We are sure that First was executed\" - name : First commands : | echo \"Doing something important...\" # Would result in the output # Doing something important # We are sure that First was executed","title":"Job dependencies"},{"location":"usage/#environment-variables","text":"Similarly to properties, environment variables for all jobs if the env key is moved to the global scope. Each job can override them if they are defined in their own scope. env : CUSTOMVAR : 42 jobs : - name : First commands : | echo \"The answer is $CUSTOMVAR\" - name : Second env : CUSTOMVAR : -1 commands : | echo \"But here is $CUSTOMVAR\" # Would result in the output # The answer is 42 # But here is -1","title":"Environment variables"},{"location":"usage/#custom-directory","text":"The directory where the command will be executed can be changed with the dir variable. The directory can be accessed also with the Dir template variable. If it's not specified, it defaults to the directory where the tool is executed. The path to the config file can be accesed also with the ConfigFile template variable. jobs : - name : First dir : /path/to/dir commands : | echo \"We are on $PWD\" echo \"Its the same as {{.Dir}}\" # Would result in the output # We are on /path/to/dir # Its the same as /path/to/dir","title":"Custom directory"},{"location":"usage/#silent-execution","text":"If the silent variable is provided and it's true, the job will not print any command. jobs : - name : Test silent : false commands : - | echo \"This wont be seen\"","title":"Silent execution"},{"location":"usage/#working-with-templates","text":"This tool relies on Go templates. For more information about them, please refer to the official documentation . This framework provides some functions that can be accesible from the templates. All the functions from the sprig library are available.","title":"Working with templates"}]}